// tag::main[]

=== Undertow 부트스트래핑

Undoertow를 부트스트래핑하는 두 가지 방법이 있습니다. 먼저, 가장 간단한 방법은 `io.undertow.Undertow` 빌더 API를 사용하는 것입니다.
두번째 방법은 XNIO와 Undertow 리스너 클래스를 사용하여 서버를 직접 조립하는 것입니다. 이 두번째 방법은 더 많은 코드가 필요하지만 더 유연합니다. 대부분의 경우에는 빌더 API로 충분할 것입니다.

Undertow에 대해서 이해하기 위해 중요한 것 중 한가지는 Undertow 컨테이너 라는 개념이 없다는 것입니다.
Undertow 응용프로그램은 여러 핸들러 클래스의 조립으로 구성되며, 이러한 모든 핸들러의 라이프 사이클을 관리하는 것은 Undertow를 임베딩한 응용프로그램에 달려 있습니다.
이는 임베디드 어플리케이션에 최대한 많은 제어 권한을 부여하기 위한 의도적인 설계상의 결정입니다.
이는 일반적으로 서버 중지시에 정리해야 하는 리소스를 보유한 핸들러가 있는 경우에만 문제가 됩니다.

==== 빌더 API

빌더 API는 `io.undertow.Undertow` 클래스를 사용해서 접근할 수 있습니다. 우리는 아래에서, 시작하기 위한 간단한 예제를 살펴볼 것입니다.

[source%nowrap,java]
----
public class HelloWorldServer {

    public static void main(final String[] args) {
        Undertow server = Undertow.builder()
                .addHttpListener(8080, "localhost")
                .setHandler(new HttpHandler() {
                    @Override
                    public void handleRequest(final HttpServerExchange exchange) throws Exception {
                        exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");
                        exchange.getResponseSender().send("Hello World");
                    }
                }).build();
        server.start();
    }
}
----

위의 예제는 모든 요청에 'Hello World'를 반환하는 간단한 서버를 시작합니다. 서버는 `server.stop()` 메서드가 호출될 때까지 포트 8080의 `localhost` 주소에서 요청을 수신합니다.
요청을 수신하면 핸들러 체인의 첫번째(이자 지금까지는 유일한) 핸들러에서 요청을 처리합니다.
이 핸들러에서는 HTTP 헤더를 설정하고 일부 내용을 응답 몸체에 써 넣습니다.
(핸들러에 대한 자세한 정보는 link:undertow-handler-guide.html[핸들러 가이드]에서 확인할 수 있습니다)

빌더는 스레드 개수나 버퍼 크기와 같은 성능 관련 매개변수에 대해 합리적인 기본값을 선택하려고 노력하지만, 빌더를 사용하여 이 모든 매개변수를 직접 오버라이드할 수 있습니다.
그러한 옵션과 효과는 link:listeners.html[리스너 가이드]에서 자세히 설명하므로 여기서는 설명하지 않습니다.

==== 직접 서버 조립

만약 빌더 API를 사용하지 않는다면 서버를 만들기 위해 따라야 할 몇가지 단계가 있습니다.

. XNIO Worker를 생성합니다. 이 Worker는 서버 IO 및 Worker 스레드 모두를 관리합니다.
. XNIO SSL 인스턴스를 생성합니다. (선택사항. HTTPS를 사용해야 할 경우에만 필요합니다.)
. 처리와 관련된 Undertow 리스너 클래스의 인스턴스를 생성합니다.
. XNIO를 사용해서 서버 소켓을 열고, 요청을 허용할 리스너를 설정합니다.

HTTP, HTTPS 그리고 AJP 리스너의 코드는 다음과 같습니다.

[source%nowrap,java]
----
Xnio xnio = Xnio.getInstance();

XnioWorker worker = xnio.createWorker(OptionMap.builder()
        .set(Options.WORKER_IO_THREADS, ioThreads)
        .set(Options.WORKER_TASK_CORE_THREADS, workerThreads)
        .set(Options.WORKER_TASK_MAX_THREADS, workerThreads)
        .set(Options.TCP_NODELAY, true)
        .getMap());

OptionMap socketOptions = OptionMap.builder()
        .set(Options.WORKER_IO_THREADS, ioThreads)
        .set(Options.TCP_NODELAY, true)
        .set(Options.REUSE_ADDRESSES, true)
        .getMap();

Pool<ByteBuffer> buffers = new ByteBufferSlicePool(BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,bufferSize, bufferSize * buffersPerRegion);


if (listener.type == ListenerType.AJP) {
    AjpOpenListener openListener = new AjpOpenListener(buffers, serverOptions, bufferSize);
    openListener.setRootHandler(rootHandler);
    ChannelListener<AcceptingChannel<StreamConnection>> acceptListener = ChannelListeners.openListenerAdapter(openListener);
    AcceptingChannel<? extends StreamConnection> server = worker.createStreamConnectionServer(new InetSocketAddress(Inet4Address.getByName(listener.host), listener.port), acceptListener, socketOptions);
    server.resumeAccepts();
} else if (listener.type == ListenerType.HTTP) {
    HttpOpenListener openListener = new HttpOpenListener(buffers, OptionMap.builder().set(UndertowOptions.BUFFER_PIPELINED_DATA, true).addAll(serverOptions).getMap(), bufferSize);
    openListener.setRootHandler(rootHandler);
    ChannelListener<AcceptingChannel<StreamConnection>> acceptListener = ChannelListeners.openListenerAdapter(openListener);
    AcceptingChannel<? extends StreamConnection> server = worker.createStreamConnectionServer(new InetSocketAddress(Inet4Address.getByName(listener.host), listener.port), acceptListener, socketOptions);
    server.resumeAccepts();
} else if (listener.type == ListenerType.HTTPS){
    HttpOpenListener openListener = new HttpOpenListener(buffers, OptionMap.builder().set(UndertowOptions.BUFFER_PIPELINED_DATA, true).addAll(serverOptions).getMap(), bufferSize);
    openListener.setRootHandler(rootHandler);
    ChannelListener<AcceptingChannel<StreamConnection>> acceptListener = ChannelListeners.openListenerAdapter(openListener);
    XnioSsl xnioSsl;
    if(listener.sslContext != null) {
        xnioSsl = new JsseXnioSsl(xnio, OptionMap.create(Options.USE_DIRECT_BUFFERS, true), listener.sslContext);
    } else {
        xnioSsl = xnio.getSslProvider(listener.keyManagers, listener.trustManagers, OptionMap.create(Options.USE_DIRECT_BUFFERS, true));
    }
    AcceptingChannel <SslConnection> sslServer = xnioSsl.createSslConnectionServer(worker, new InetSocketAddress(Inet4Address.getByName(listener.host), listener.port), (ChannelListener) acceptListener, socketOptions);
    sslServer.resumeAccepts();
}
----

보다시피 빌더를 사용하는 것보다 코드가 훨씬 길지만, 빌더가 제공하지 않는 다음과 같은 유연성을 제공합니다.

- 모든 옵션의 완전한 제어
- 각각의 리스너에 대해 서로 다른 버퍼 풀과 Worker를 지정 가능
- 다른 서버 인스턴스 간에 XnioWorker 인스턴스를 공유 가능
- 다른 서버 인스턴스 간에 버퍼 풀 공유 가능
- 리스너에게 다른 루트 핸들러를 지정 가능

대부분의 경우에 이 정도의 제어는 필요하지 않으며, 빌더 API를 사용하는 것이 좋습니다.

// end::main[]
