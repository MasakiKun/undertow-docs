// tag::main[]

=== 아키텍처 개요

Undertow의 독특한 점은, 글로벌 '컨테이너'의 개념을 가지고 있지 않다는 것입니다. 그 대신, Undertow를 내장한 어플리케이션에서 Undertow 서버를 조립하게 됩니다. 이것은 Undertow를 몹시 유연하게 만들며, Undertow를 내장한 어플리케이션은 필요한 부분을 선택해서 어떤 방식으로든지 조립할 수 있습니다.

Undertow 서버는 기본적으로, 하나 혹은 그 이상의 XNIO 워커 인스턴스, 하나 혹은 그 이상의 커넥터, 그리고 수신된 요청을 처리하기 위한 핸들러 체인으로 구성됩니다.

==== XNIO

Undertow는 XNIO 기반입니다. XNIO 프로젝트는 Java NIO보다도 더 얇은 추상 레이어를 제공합니다. 특히 다음과 같은 것들을 제공합니다.

==== IO 및 워커 스레드 관리

The XNIO worker manages both the IO threads, and a thread pool that can be used for blocking tasks. In general non-blocking
handlers will run from within an IO thread, while blocking tasks such as Servlet invocations will be dispatched to the
worker thread pool.

IO threads run in a loop. This loop does three things:

 - Run any tasks that have been scheduled for execution by the IO thread
 - Run any scheduled tasks that that have hit their timeout
 - Call Selector.select(), and then invoke any callbacks for selected keys

==== Channel API

XNIO provides a channel abstraction, that abstracts away the underlying transport. Channels are notified of events
using the `ChannelListener` API, and do not have to deal with NIO interest OPs directly. At creation time channels are
assigned an IO Thread. This is the thread that will be used to execute all ChannelListener invocations for the channel.

==== Listeners

The concept of a listener in Undertow is basically the part of Undertow that handles incoming connections, and the
underlying wire protocol. By default Undertow ships with 5 different listeners:

- HTTP/1.1
- HTTPS
- AJP
- HTTP/2

These listeners will generally do all IO in an IO thread using async IO. When a request has been fully parsed they will
create a `HttpServerExchange` object populated with the request data and then hand this to the handler chain.

Connectors are tied to an XNIO worker. If multiple connectors are setup to invoke the same handler chain they may share
a Worker, or they may have separate workers, depending on how they have been configured.

In general it should not matter to your application the type of connector that is in use, the exception being that not
all connectors support all features. For example AJP does not support HTTP upgrade.

For more information on listeners see the link:listeners.html[listeners guide].

==== Handlers

The main Undertow functionality is provided by `io.undertow.server.HttpHandler` instances. These handlers can be chained
together to form a complete server.

The HttpHandler interface is quite simple:

[source%nowrap,java]
----
public interface HttpHandler {

    void handleRequest(HttpServerExchange exchange) throws Exception;
}
----

Handlers are generally chained together by explicitly specifying the next handler at construction time, there is no
'pipeline' concept, which means that a handler can pick the next handler to invoke based on the current request. A
typical handler might look something like this:


[source%nowrap,java]
----
public class SetHeaderHandler implements HttpHandler {

    private final HttpString header;
    private final String value;
    private final HttpHandler next;

    public SetHeaderHandler(final HttpHandler next, final String header, final String value) {
        this.next = next;
        this.value = value;
        this.header = new HttpString(header);
    }

    @Override
    public void handleRequest(final HttpServerExchange exchange) throws Exception {
        exchange.getResponseHeaders().put(header, value);
        next.handleRequest(exchange);
    }
}

----


// end::main[]

