// tag::main[]

=== 아키텍처 개요

Undertow의 독특한 점은, 글로벌 '컨테이너'의 개념을 가지고 있지 않다는 것입니다. 그 대신, Undertow를 내장한 어플리케이션에서 Undertow 서버를 조립하게 됩니다. 이것은 Undertow를 몹시 유연하게 만들며, Undertow를 내장한 어플리케이션은 필요한 부분을 선택해서 어떤 방식으로든지 조립할 수 있습니다.

Undertow 서버는 기본적으로, 하나 혹은 그 이상의 XNIO 워커 인스턴스, 하나 혹은 그 이상의 커넥터, 그리고 수신된 요청을 처리하기 위한 핸들러 체인으로 구성됩니다.

==== XNIO

Undertow는 XNIO 기반입니다. XNIO 프로젝트는 Java NIO보다도 더 얇은 추상 레이어를 제공합니다. 특히 다음과 같은 것들을 제공합니다.

==== IO 및 워커 스레드 관리

XNIO 워커는 블로킹 작업을 수행하는데 사용될 수 있는 스레드풀과 IO 스레드를 모두 관리합니다. 일반적으로 넌블로킹 핸들러는 IO 스레드에서 실행되고, 서블릿과 같은 블로킹 작업은 스레드풀로 보내집니다(while blocking tasks such as Servlet invocations will be dispatched to the worker thread pool).

IO 스레드는 루프에서 실행됩니다. 이 루프는 다음 세가지 작업을 합니다.

 - IO 스레드에 의해 실행이 예약된 작업의 실행
 - 타임아웃된 예약된 작업의 실행 (Run any scheduled tasks that that have hit their timeout)
 - Selector.select()를 호출하고, 선택된 키에 해당하는 콜백을 호출 (Call Selector.select(), and then invoke any callbacks for selected keys)

==== 채널 API

XNIO는 하부(underlying)의 전송을 추상화하는 채널 추상화 기능을 제공합니다.
채널은 `ChannelListener` API를 사용해서 이벤트를 통지하며, NIO의 관심사를 직접 처리할 필요는 없습니다.
채널 생성시, 채널에는 IO 스레드가 할당됩니다.
이 스레드는 채널의 모든 ChannelListener 호출을 실행하는 데 사용되는 스레드입니다.

==== 리스너 (Listeners)

Undertow에서의 리스너의 개념은 들어오는 연결(incoming connections)과 하부의 연결 프로토콜(underlying wire protocol)을 처리하는 Undertow의 기본 구성요소입니다.
기본적으로 Undertow에는 5개의 다른 리스너가 있습니다.

- HTTP/1.1
- HTTPS
- AJP
- HTTP/2

이러한 리스터들은 일반적으로 비동기 IO를 이용해서 IO 스레드에서 모든 IO를 처리합니다.
요청이 완전히 분석(parsed)되면 요청 데이터로 채워진 `HttpServerExchange` 객체를 생성하여, 이것을 핸들러 체인으로 전달합니다.

커넥터는 XNIO Worker와 연결됩니다. 만약 여러 핸들러가 같은 핸들러 체인을 호출하도록 설정되어 있는 경우, 어떻게 설정되었는가에 따라서 Worker를 공유할 수도 있고, 별도의 Worker가 있을수도 있습니다.

일반적으로, 모든 커넥터가 모든 기능을 지원하지 않는다는 점을 제외하고는, 어플리케이션에서 사용중인 커넥터의 종류는 중요하지 않아야 합니다.
예를 들어, AJP는 HTTP로의 업그레이드를 지원하지 않습니다.

리스너에 대한 더 자세한 내용은 link:listeners.html[리스너 가이드]를 참조하십시오.

==== Handlers

The main Undertow functionality is provided by `io.undertow.server.HttpHandler` instances. These handlers can be chained
together to form a complete server.

The HttpHandler interface is quite simple:

[source%nowrap,java]
----
public interface HttpHandler {

    void handleRequest(HttpServerExchange exchange) throws Exception;
}
----

Handlers are generally chained together by explicitly specifying the next handler at construction time, there is no
'pipeline' concept, which means that a handler can pick the next handler to invoke based on the current request. A
typical handler might look something like this:


[source%nowrap,java]
----
public class SetHeaderHandler implements HttpHandler {

    private final HttpString header;
    private final String value;
    private final HttpHandler next;

    public SetHeaderHandler(final HttpHandler next, final String header, final String value) {
        this.next = next;
        this.value = value;
        this.header = new HttpString(header);
    }

    @Override
    public void handleRequest(final HttpServerExchange exchange) throws Exception {
        exchange.getResponseHeaders().put(header, value);
        next.handleRequest(exchange);
    }
}

----


// end::main[]

